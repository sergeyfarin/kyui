#summary Musing on the design and use of icons in applications

= Icons =

Poorly designed icons suffer from failing to be obvious: they do not _look like_ the functionality they represent. If a tooltip is _necessary_ to inform a user of the icon's purpose, it has already failed by wasting the user's time. He or she could have instead navigated a menu to find the same functionality. At their core--labeled or otherwise--tool buttons are iconic: they must quickly inform a user of what they do. Menus provide icons to assist, but these are secondary to text.

== History ==

Before we can discuss icon design and use, some history is relevant. Merriam-Webster defines "icon" as this:

 Icon:
  * 1: a usually pictorial representation : image
  * 5 a : a sign (as a word or graphic symbol) whose form suggests its meaning b : a graphic symbol on a computer display screen that usually suggests the type of object represented or the purpose of an available function

Definition 5a is the definition of particular interest to us. 5b is a more modern, specific use of the word icon. An icon is a sign or symbol intended to convey meaning beyond that of its face. That is, if I were to draw the word "HOUSE" with each letter forming a circle, it could be considered an icon with the meaning "around the house". I could also draw a picture of a house and draw and arrow circling it, providing the same meaning.

===Etymology===

The etymology of icon brings us back to its original sense in Ancient Greek: the word eikon, meaning "likeness, image, portrait" (from the Online Etymology Dictionary). Eikon has remarkably retained a great deal of its original meaning. The Online Etymology Dictionary has this to add as well: eikon is related to another Greek word, eikenai, meaning to "be like, look like". This relation is particularly important given that we (most of us, at least), do not read Ancient Greek, so context is lost via translation. The association is helpful in giving meaning to the use of eikon itself. I am not a student of ancient languages, but the importance of icon at its root is not lost here.

Icon was later, like many previously esoteric words, adopted by the early computing world to define a new concept with an old term. Xerox's Palo Alto Research Center is responsible for the term and modern computing concept of icon, along with the fundamental elements of the Graphical User Interface. Some terms adopted for new concepts in computing are whimsical (e.g., the mouse), but many terms dig deeply into technical or rarely-used words to explain new ideas. In some cases, the term has almost entirely co-opted the old denotation; an example of this is the word cursor.

===Limitations: Resolution===

Icons were, and still are, limited by available space and detail. Modern computers use either a 72 or 96 dots per inch display standard. Most operating systems have switched to 96dpi and support higher resolution, typically 120dpi. The greater the detail of the icon, the more information it can convey. Increased detail can be achieved either through increasing the size of the icon or its resolution. Both of these are critical to the design of a quality icon that readily conveys its purpose in or out of context.

===Limitations: Space===

If detail cannot be increased, space is important. An object viewed at a distance is difficult to discern, but closer inspection reveals detail. Creating a larger icon performs precisely this function. With more "screen real estate" available, an icon designer has room to include subtle nuances that can be crucial in making, at its core, an icon recognizable as _something_. Tiny icons at low resolution are difficult to understand by an inexperienced (or even an experienced) user.

===Limitations: Color===

Early icons were limited greatly by the the capabilities of the computing platforms of the day. Black and white gave way to grayscale, 8-bit color, and now to the modern 24-bit color with an 8-bit alpha channel. Even finer gradients for color definition are used in several fields, but the current desktop computer uses the 24- or 32-bit RGB standard. Colors provide nuance that larger two-dimensional space cannot convey. Colors provide shading, instinctual hints as to purpose, and decrease the time it takes for a user to connect the icon with its meaning.

===The Tool Button===

While frequent use of an application creates automatic familiarity and the use of muscle memory, icons also serve a final purpose: quick access to functionality. Menu-driven software often devolves into a mess of nested menus. Frequently used options can be sorted towards the top of a menu, as Microsoft experimented with, or drawn out of sub-menus and thereby out of context. Neither of the options is acceptable and further obfuscates a deeply nested set of menus.

Enter the icon, tool button, and the toolbar--an icon allows a user to do with one or two mouse clicks (if the icon has an associated menu) what might take three, four, or more clicks through a menu. The original issue with icons and tool buttons, however, is how to convey their meaning in a 16x16 pixel space. Some of this was helped by inserting the same icon that a button uses into its associated menu entry. In this way the user can learn to recognize an unlabeled tool button via an icon alone. This is a circuitous method assisted by the use of tooltips, but still does not solve the problem of icons that inadequately convey their purpose.

== Modern Icons ==

The modern use of icons, however, lags behind its capabilities. Apple brought icons back to the forefront of the user's mind with MacOS X and its very loud use of bright, shiny icons. This steps into dangerous territory itself by being distracting, but that isn't the direction of this essay. Most applications still use unlabelled 16x16 pixel icons for their toolbars. Since menus also use 16x16 icons, this is somewhat understandable from a development point of view: it's easy and requires one icon for one action.

New applications largely use 22x22 pixel icons for their toolbars, often with labels. The necessity of a label is often a result of the icon's purpose being difficult to discern. To the credit of some applications, toolbuttons with icons and labels are being used to entirely replace text-based menubars entirely.

(Finish me while not at Starbucks)